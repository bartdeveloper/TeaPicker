@page "/overview"
@using TeaPicker.DataAccess.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IToastService toastService

<PageTitle>Teas overview</PageTitle>

<h1>🍵 Teas overview</h1>

<p>This component shows the list of teas. </p>

    <button class="btn btn-primary" @onclick="() => RedirectToCreate()"><span class="oi oi-plus" aria-hidden="true"></span> Create new</button>

    <br/><br/>

    <div class="row">
        @if (teas is null)
        {
            <p><em>Loading list...</em></p>
        }
        else 
        {

            @foreach (var tea in teas)
            {

            var cut = 100;
            if (tea.Description.Length < 100) cut = tea.Description.Length;

                <div class="col-12 col-sm-6 col-md-6 col-lg-6 col-xl-4">
                    <div @onclick="() => RedirectToTea(tea.Id)" class="pointer margin5 card @(SelectedTea?.Id == tea.Id ? "bg-light" : "")">
                        <div class="card-body">
                            <h3 class="card-title">@tea.Name</h3>
                            <p><b>Brewing temp:</b> @tea.BrewingTemp ℃ <b>time:</b> @tea.BrewingTime min</p>
                            <img src="@tea.ImageUri" class="tea-img">
                            <p class="card-text">@tea.Description.Substring(0, cut)...</p>
                        </div>
                    </div>
                </div>
            }

        }
            
    </div>

    <br/>

    Source of teas description: https://www.artfultea.com/tea-wisdom-1/types-of-tea-a-comprehensive-guide

    <Footer Text="2022" />

@code {

    private List<Tea> teas = new();
    private Tea SelectedTea;
    private bool CreatorMode = false;

    protected override async Task OnInitializedAsync()
    {
        teas = await GetTeas();
    }

    private void RedirectToCreate()
    {
        NavigationManager.NavigateTo("/create");
    }

    private void RedirectToTea(int teaId)
    {
        NavigationManager.NavigateTo($"/details/{teaId}");
    }

    async Task<List<Tea>> GetTeas()
    {
        return await Http.GetFromJsonAsync<List<Tea>>("Tea/list");
    }

    async Task TeaValidSubmit()
    {
        HttpResponseMessage response;

        response = await Http.PostAsJsonAsync<Tea>("Tea", SelectedTea);

        if (response.IsSuccessStatusCode)
        {
            CreatorMode = false;
            SelectedTea = await response.Content.ReadFromJsonAsync<Tea>();
            teas = await GetTeas();
            toastService.ShowSuccess("Added!");
        } else
        {
            toastService.ShowError("Something went wrong!");
        }

    }

    void ShowCreateMode()
    {
        SelectedTea = new();
        CreatorMode = true;
    }
}
